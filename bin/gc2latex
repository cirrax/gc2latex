#!/usr/bin/perl

# gc2latex by Stefan Tomanek <stefan@pico.ruhr.de>

use Gnucash::Business::Invoice;
use Gnucash::Business::InvoiceEntry;
use Gnucash::Business::Customer;
use IO::File;
use Date::Format;
use IO::Zlib;

use strict;

sub main($$$) {
    my ($template, $gnucash, $id) = @_;

    unless (defined $template && defined $gnucash && defined $id) {
	print "Usage: gc2latex <template file> <account file> <invoice id>\n";
	return;
    }

    my $parser = new XML::Parser (ErrorContext => 2, Style => "Tree");

    my $zhandle = new IO::Zlib;
    $zhandle->open($gnucash, "rb") || die "Unable to zopen Gnucash file\n";

    my $xmlobj = new XML::SimpleObject( $parser->parse($zhandle) ) || die "Unable to open Gnucash file";

    my $invoice = new Invoice( $xmlobj, $id);

    replace($template, $invoice);
}

# LaTeX encode: use LaTeX::Encode if available
sub l_enc ($) {
    my ($data) = @_;
    my $result = $data;
    eval {
        # try to load LaTeX::Encode and encode the supplied data
        # if the module cannot be found, continue silently and
        # just leave the data untouched
        require LaTeX::Encode;
        $result = LaTeX::Encode::latex_encode( $data, {iquotes=>1} );
    };
    return $result;
}

sub createLaTexMacros() {
  my $text= '%\usepackage{etoolbox}';

  $text .= '\newcommand\gclsetline[3]{%'    ."\n";
  $text .= '  \csdef{gcl#1#2}{#3}}%'        ."\n";

  $text .= '\newcommand\gclgetline[2]{%'    ."\n";
  $text .= '  \csuse{gcl#1#2}}'             ."\n";

  return $text;
}

sub createLaTexParams($) {
  my ($invoice) = @_;

  my $text = '';

  my $i=0;
  foreach my $e (@{ $invoice->getEntries() }) {
    $text .= "\\gclsetline{date}{$i}{"        . time2str("%e.%L.%Y", $e->getDate())      . "}\n" ;
    $text .= "\\gclsetline{description}{$i}{" . l_enc( $e->getDescription() )            . "}\n" ;
    $text .= "\\gclsetline{einheit}{$i}{"     . l_enc( $e->getAction() )                 . "}\n" ;
    $text .= "\\gclsetline{quantity}{$i}{"    . $e->getQuantity()                        . "}\n" ; 
    $text .= "\\gclsetline{price}{$i}{"       . sprintf("%0.2f", $e->getNetPrice())      . "}\n" ;
    $text .= "\\gclsetline{amount}{$i}{"      . sprintf("%0.2f", round($e->getNetSum())) . "}\n" ;
    $text .= "\n";
    $i=$i+1;
  }

  $text .= '\csdef{gclinvoicelines}{' . $i . "}\n";
  return $text;
}

sub replace($$) {
    my ($template, $invoice) = @_;
    
    my $file = new IO::File "< $template" || die "Unable to open template";

    my $id = $invoice->getID();
    my $date = l_enc( time2str("%e.%L.%Y", $invoice->getPostingDate()) );
    my $address = l_enc( $invoice->getCustomer()->getAddress() );
    $address =~ s/\n/\\\\/g;
    my $notes = $invoice->getNotes();

    # invoice items (mutliple lines)
    my $parameters = createLaTexParams($invoice);
    my $macros = createLaTexMacros();

    while ( my $l = $file->getline() ) {

        $l =~ s/__GNUCASH-INVOICE-ID__/$id/;
        $l =~ s/__GNUCASH-POSTING-DATE__/$date/;
        $l =~ s/__GNUCASH-CUSTOMER__/$address/;
        $l =~ s/__GNUCASH-INVOICE-NOTES__/$notes/;

        # invoice items (multiple lines)
        $l =~ s/__GNUCASH-MACROS__/$macros/;
        $l =~ s/__GNUCASH-PARAMETERS__/$parameters/;

        print $l;
    }
    $file->close();
}

sub round($) {
    my ($value) = @_;
    return int($value * 100 + 0.5) / 100;
}

main($ARGV[0], $ARGV[1], $ARGV[2]);
